'''Клас «Прямокутник/
Створіть клас «Прямокутник», у якого необхідно реалізувати два поля (ширина та висота) та кілька обов'язкових методів:

Метод порівняння прямокутників за площею.
Метод складання прямокутників (площа сумарного прямокутника повинна дорівнювати сумі площ прямокутників, які ви складаєте).
Методи множення прямокутника на число n (це має збільшити площу базового прямокутника в n разів).
У класі можуть бути створені додаткові (допоміжні методи)

Декілька уточнень:

Методи складання, множення, поділу тощо. обов'язково маємо повертати новий екземпляр класу Прямокутник!
Для множення, додавання, порівняння, обов'язково потрібно перевизначати "магічні" методи. Для множення є
вбудований метод mul. Коли в результаті мат. дій створюєте новий екземпляр класу Прямокутник, то у цього екземпляру,
перемноження сторін, має давати необхідну площу. Це теж важливо. Тобто, якщо Ви до прямокутника, у якого площа
дорівнює 8, додаєте інший прямокутник з площею 18, необходимо створити новий прямокутник, площа якого дорівнює 26.
Площа це довжина, помноженна на висоту. Значить необхідно підібрати сторони вновь створенного прямокутника таким чином,
 щоб вони давали необхідну площу!'''



class Rectangle: #створення класу
    def __init__(self, width, height): #за допомогою конструктора створюємо новий об'єкт класу
        #self - посилання на сам об'єкт (тобто створення доступу до атрибутів об'єкта)
        self.width = width #параметри, або атрибути, які передаються у конструктор під час створення об'єкта
        self.height = height #(тобто ширина та висота прямокутника у нашому випадку)

    def get_square(self):#обчислення площі прямокутника за його параметрами
        return self.width * self.height

    def __eq__(self, other): #other це інший об'єкт з яким ми хочемо порівняти наш прямокутник
        if isinstance(other, Rectangle):#перевірка чи цей об'єкт належить до класу Rectangle
            # (тобто чи містить у собі ті самі параметри, ширину і висота)
            return self.get_square() == other.get_square() #повертає результат порівняння двох об'єктів
        return False
        #якщо об'єкт не належить до нашого класу Rectangle з параметрами висоти та ширини, видає помилку.
        #це важливо, бо треба порівнювати об'єкти тільки одного і того ж типу (тобто тільки прямокутники в даному випадку).
        #інакше буде помилка.

    def __add__(self, other):  #тут створюємо новий третій прямокутник
        if isinstance(other, Rectangle): #конкретизуємо щоб об'єкт точно належив до нашого класу
            new_area = self.get_square() + other.get_square() #добавляємо площі обох наших прямокутників
            new_width = self.width #ширина нового прямокутника буде такою ж, як і у поточного
            new_height = new_area // new_width #висота нового третього прямокутника
            return Rectangle(new_width, new_height)#повертаємо в результати новий створений об'єкт
        return NotImplemented #якщо othe не є об'єктом класу Rectangle видасть помилку.

    def __mul__(self, n): #метод множення прямокутника на число n
        if isinstance(n, int): #конкретизаємо що n має бути цілим числом integer
            new_area = self.get_square() * n #множимо площу нашого третього прямокутника на це число і отримуємо нові дані
            new_width = self.width #встановлюємо ширину нового прямокутника такою ж, як у поточного
            new_height = new_area // new_width # обчислюємо висоту нового прямокутника
            return Rectangle(new_width, new_height) # повертаємо новий об'єкт Rectangle з обчисленими параметрами
        return NotImplemented  #якщо n не є цілим числом, повертає помилку

    def __str__(self):
        return f"Rectangle(width={self.width}, height={self.height})"


r1 = Rectangle(2, 4)
r2 = Rectangle(3, 6)
assert r1.get_square() == 8, 'Test1'
assert r2.get_square() == 18, 'Test2'

r3 = r1 + r2
assert r3.get_square() == 26, 'Test3'

r4 = r1 * 4
assert r4.get_square() == 32, 'Test4'

assert Rectangle(3, 6) == Rectangle(2, 9), 'Test5'


r1 = Rectangle(2, 4)
r2 = Rectangle(3, 6)
assert r1.get_square() == 8, 'Test1'
assert r2.get_square() == 18, 'Test2'

r3 = r1 + r2
assert r3.get_square() == 26, 'Test3'

r4 = r1 * 4
assert r4.get_square() == 32, 'Test4'

assert Rectangle(3, 6) == Rectangle(2, 9), 'Test5'
print('Ok!')